//{ Driver Code Starts
//Initial Template for C++


#include <bits/stdc++.h>
using namespace std;
#define MAX_HEIGHT 100000


// } Driver Code Ends
/* Tree node structure  used in the program

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};*/


class MergeNode{
public:
    int minNode;
    int maxNode;
    int maxSize;
    
    MergeNode(int minNode, int maxNode, int maxSize){
        
        this->minNode = minNode;
        this->maxNode = maxNode;
        this->maxSize = maxSize;
    }
};


MergeNode findLargest(Node* root){
    
    if(root == NULL){
        return MergeNode(INT_MAX, INT_MIN, 0);
    }
    
    MergeNode left = findLargest(root->left);
    MergeNode right = findLargest(root->right);
    
    if(left.maxNode < root->data and right.minNode > root->data){
        
        return MergeNode(min(left.minNode, root->data), max(root->data, right.maxNode),
                        left.maxSize + right.maxSize+1);
    }
    
    return MergeNode(INT_MIN, INT_MAX, max(left.maxSize, right.maxSize));
    
}

class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    int largestBst(Node *root)
    {
    	//Your code here
    	
    	return findLargest(root).maxSize;
    }
};

// } Driver Code Ends
